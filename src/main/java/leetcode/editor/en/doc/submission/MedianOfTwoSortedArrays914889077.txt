    class Solution {
        public double findMedianSortedArrays(int[] nums1, int[] nums2) {
            ArrayList<Integer> list = new ArrayList<>(Arrays.asList(Arrays.stream(nums1).boxed().toArray(Integer[]::new)));
            list.addAll(Arrays.asList(Arrays.stream(nums2).boxed().toArray(Integer[]::new)));
            double res = 0;
            Collections.sort(list);
            int sumLength = nums1.length + nums2.length;
            if (sumLength % 2 != 0) {
                int mid = sumLength / 2;
                res = Double.valueOf(list.get(mid));
            }
            if (sumLength % 2 == 0) {
                int mid1 = sumLength / 2 - 1;
                int mid2 = sumLength / 2;
                res = (Double.valueOf(list.get(mid1)) + Double.valueOf(list.get(mid2))) / 2;
            }

            return res;
        }
    }

//runtime:13 ms
//memory:44 MB
